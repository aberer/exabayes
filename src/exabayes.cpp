/** 
    @file exabayes.cpp
    
    @brief This file sets the flavour of exabayes that has been
    compiled (i.e., sequential, pll, examl, ...)
    
*/ 



// TODO re-activate all that initial bla bla when starting up
// exa-bayes (model / program info )


#ifdef HAVE_AVX
#define __AVX
#endif

#include <sstream>

#include "axml.h" 

#define _INCLUDE_DEFINITIONS
#include "GlobalVariables.hpp"
#undef _INCLUDE_DEFINITIONS

#include "tune.h"
#include "output.h"

#include "CommandLine.hpp"
#include "SampleMaster.hpp"
#include "ParallelSetup.hpp"

#include "teestream.hpp"

// #define TEST  

#ifdef TEST
#include "TreeRandomizer.hpp"
#include "eval.h"
#endif



#include "branch.h"





// have ae look at that later again 
double fastPow(double a, double b) {
  union {
    double d;
    int x[2];
  } u = { a };
  u.x[1] = (int)(b * (u.x[1] - 1072632447) + 1072632447);
  u.x[0] = 0;
  return u.d;
}


#include <unordered_map>

/**
   @brief the main ExaBayes function.

  @param tr -- a tree structure that has been initialize in one of the adapter mains. 
   @param adef -- the legacy adef
 */
void exa_main (const CommandLine &cl, ParallelSetup &pl )
{   
  timeIncrement = gettime();

#ifdef TEST   

  auto traln =  make_shared<TreeAln>( )  ; 
  traln->initializeFromByteFile(cl.getAlnFileName());

  vector<shared_ptr<TreeAln> >  tralns = {traln}; 

  TreeRandomizer r(123, traln ); 
  
  for(int i = 0; i < 10; ++i)
    r.randomizeTree();

  ofstream myfile; 
  myfile.open("branches.txt") ; 

  unordered_map<int, unordered_map<int,int>> mapmap; 

  Randomness rand(123); 
  for(int i = 0; i < 10000; ++i)
    {
      Branch b = rand.drawInnerBranchUniform(*traln); 
      // myfile << b.getPrimNode() << "\t" << b.getSecNode() << endl;
      
      mapmap[b.getPrimNode()][b.getSecNode()]++; 
      
    }
  myfile.close(); 

  for(auto &submap : mapmap)
    {
      cout << submap.first << endl; 
      for(auto & v : submap.second)
	{
	  cout << "\t" << v.first << ": "<< v.second << endl; 
	}
    }

  
  exit(0); 


#endif

  SampleMaster master(  pl);
  master.initializeRuns(cl);
  master.run();
  master.finalizeRuns();
}


/* 
   tell the CPU to ignore exceptions generated by denormalized floating point values.
   If this is not done, depending on the input data, the likelihood functions can exhibit 
   substantial run-time differences for vectors of equal length.
*/

void ignoreExceptionsDenormFloat()
{
#if ! (defined(__ppc) || defined(__powerpc__) || defined(PPC))
  _mm_setcsr( _mm_getcsr() | _MM_FLUSH_ZERO_ON);
#endif   
}


#if HAVE_PLL != 0
#include "globalVariables.h"
#endif

#if HAVE_PLL == 0 
extern int processID; 
extern int processes;
extern MPI_Comm comm; 
#endif


void makeInfoFile(const CommandLine &cl, const ParallelSetup &pl )
{
  stringstream ss; 
  string workdir =  cl.getWorkdir(); 
  ss << workdir ; 
  if(workdir.compare("") != 0 )
    ss << "/" ; 
  ss << PROGRAM_NAME << "_info."  << cl.getRunid() ;

  // TODO maybe check for existance 

  globals.logFile = ss.str();   
  globals.logStream = new ofstream (globals.logFile) ; 
  globals.teeOut = new teestream(cout, *globals.logStream);

  if(not pl.isReportingProcess())
    tout.disable(); 
}



int main(int argc, char *argv[])
{   
  ParallelSetup pl(argc,argv); 		// MUST be the first thing to do because of mpi_init ! 


#if HAVE_PLL != 0 && ( (defined(_FINE_GRAIN_MPI) || defined(_USE_PTHREADS)))
  assert(0); 
#endif

  ignoreExceptionsDenormFloat(); 
  CommandLine cl(argc, argv); 

#if HAVE_PLL == 0 
  pl.initializeExaml(cl);
#endif

  makeInfoFile(cl, pl);

  // cl.printVersion(true);  
  tout << endl; 

  tout << PROGRAM_NAME << " was called as follows: " << endl; 
  for(int i = 0; i < argc; ++i)
    tout << argv[i] << " " ; 
  tout << endl << endl; 



  exa_main( cl, pl); 

  pl.finalize();  
  return 0;
}
