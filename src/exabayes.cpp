/** 
    @file exabayes.cpp
    
    @brief This file sets the flavour of exabayes that has been
    compiled (i.e., sequential, pll, examl, ...)
    
*/ 



// TODO re-activate all that initial bla bla when starting up
// exa-bayes (model / program info )


#ifdef HAVE_AVX
#define __AVX
#endif

// using namespace std; 

#include <sstream>


#include "axml.h" 

#define _INCLUDE_DEFINITIONS
#include "GlobalVariables.hpp"
#undef _INCLUDE_DEFINITIONS

#include "tune.h"
#include "output.h"

#include "CommandLine.hpp"
#include "SampleMaster.hpp"
#include "ParallelSetup.hpp"

#include "teestream.hpp"

// #define TEST  

#ifdef TEST
#include "TreeRandomizer.hpp"
#include "eval.h"
#endif



#include "branch.h"





// have ae look at that later again 
double fastPow(double a, double b) {
  union {
    double d;
    int x[2];
  } u = { a };
  u.x[1] = (int)(b * (u.x[1] - 1072632447) + 1072632447);
  u.x[0] = 0;
  return u.d;
}


/**
   @brief the main ExaBayes function.

  @param tr -- a tree structure that has been initialize in one of the adapter mains. 
   @param adef -- the legacy adef
 */
void exa_main (const CommandLine &cl, ParallelSetup &pl )
{   
  timeIncrement = gettime();

#ifdef TEST   

  vector<double> tmp = {1,2,3,4,5,6}; 
  cout << std::accumulate(tmp.begin(), tmp.end(), 0 , plus<double>()) << endl; 
  


  // TreeAln traln; 
  // traln.initializeFromByteFile(cl.getAlnFileName());

  // cout << traln << endl; 

  // TreeRandomizer r(123, ); 
  // r.randomizeTree();
  // tree *tr = traln.getTr(); 


  // cout << traln.getTr()->nodep[1]->back << endl; 
  // cout << "hi" << endl; 

  // modifyBranchLength(traln,traln.getTr()->nodep[1]->back, 
  // 		     [](nodeptr p)
  // 		     {
  // 		       cout << "visiting node number " << p->number << "\t" << endl ;  // << p->z[0] << endl; 
  // 		     }
  // 		     ); 

  // traln.enableParsimony(); 

  // for(int i = 1 ;  i < 2 * tr->mxtips -2 ; ++i)
  //   {
  //     vector<nat> partitionParsimony; 
  //     exa_evaluateParsimony(traln, tr->nodep[i], TRUE ,partitionParsimony); 
      
  //     for(auto b : partitionParsimony)
  // 	cout << b << "," ; 
  //     cout << endl; 
  //   }


  // exit(0);

#endif

  SampleMaster master(  pl);
  master.initializeRuns(cl);
  master.run();
  master.finalizeRuns();
}


/* 
   tell the CPU to ignore exceptions generated by denormalized floating point values.
   If this is not done, depending on the input data, the likelihood functions can exhibit 
   substantial run-time differences for vectors of equal length.
*/

void ignoreExceptionsDenormFloat()
{
#if ! (defined(__ppc) || defined(__powerpc__) || defined(PPC))
  _mm_setcsr( _mm_getcsr() | _MM_FLUSH_ZERO_ON);
#endif   
}


#if HAVE_PLL != 0
#include "globalVariables.h"
#endif

#if HAVE_PLL == 0 
extern int processID; 
extern int processes;
extern MPI_Comm comm; 
#endif


void makeInfoFile(const CommandLine &cl)
{
  stringstream ss; 
  string workdir =  cl.getWorkdir(); 
  ss << workdir ; 
  if(workdir.compare("") != 0 )
    ss << "/" ; 
  ss << PROGRAM_NAME << "_info."  << cl.getRunid() ;

  // TODO maybe check for existance 

  globals.logFile = ss.str();   
  globals.logStream = new ofstream (globals.logFile) ; 
  globals.teeOut = new teestream(cout, *globals.logStream);
}



int main(int argc, char *argv[])
{   
  ParallelSetup pl(argc,argv); 		// MUST be the first thing to do because of mpi_init ! 


#if HAVE_PLL != 0 && ( (defined(_FINE_GRAIN_MPI) || defined(_USE_PTHREADS)))
  assert(0); 
#endif

  ignoreExceptionsDenormFloat(); 
  CommandLine cl(argc, argv); 

  makeInfoFile(cl);

  cl.printVersion(true);  
  tout << endl; 

  tout << PROGRAM_NAME << " was called as follows: " << endl; 
  for(int i = 0; i < argc; ++i)
    tout << argv[i] << " " ; 
  tout << endl << endl; 



#if HAVE_PLL == 0 
  pl.initializeExaml(cl);
#endif

  exa_main( cl, pl); 

  pl.finalize();  
  return 0;
}
