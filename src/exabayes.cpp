/** 
    @file exabayes.cpp
    
    @brief This file sets the flavour of exabayes that has been
    compiled (i.e., sequential, pll, examl, ...)
    
*/ 



// TODO re-activate all that initial bla bla when starting up
// exa-bayes (model / program info )


#ifdef HAVE_AVX
#define __AVX
#endif

#include "axml.h" 
// #include "bayes.h"

#define _INCLUDE_DEFINITIONS
#include "GlobalVariables.hpp"
#undef _INCLUDE_DEFINITIONS

#include "proposals.h"
#include "output.h"
#include "adapters.h"
#include "CommandLine.hpp"
#include "SampleMaster.hpp"

void exa_main (analdef *adef, int seed, initParamStruct *initParams); 


#if HAVE_PLL != 0
static void errorExit( int i )
{
  printf("error\n") ;
  exit(0);
}
#endif


/* 
   tell the CPU to ignore exceptions generated by denormalized floating point values.
   If this is not done, depending on the input data, the likelihood functions can exhibit 
   substantial run-time differences for vectors of equal length.
*/

void ignoreExceptionsDenormFloat()
{
#if ! (defined(__ppc) || defined(__powerpc__) || defined(PPC))
  _mm_setcsr( _mm_getcsr() | _MM_FLUSH_ZERO_ON);
#endif   
}


#if HAVE_PLL != 0

#include "globalVariables.h"

int main (int argc, char *argv[])
{ 
#if (defined(_FINE_GRAIN_MPI) || defined(_USE_PTHREADS))
  assert(0); 
#endif
  // TODO 
  // ignoreExceptionsDenormFloat(); 

  CommandLine cl(argc, argv); 
  makeFileNames(); 

  initParamStruct *initParams = (initParamStruct*)exa_calloc(1,sizeof(initParamStruct));   
  parseConfigWithNcl(configFileName, &initParams);

  exa_main(cl.getAdef(), cl.getSeed(), initParams); 

  return 0;

  
}
#else 

extern int processID; 
extern int processes;
extern MPI_Comm comm; 



int main(int argc, char *argv[])
{   
  MPI_Init(&argc, &argv);

  int globalRank = 0, 
    globalSize = 0; 

  MPI_Comm_rank(MPI_COMM_WORLD, &globalRank);
  MPI_Comm_size(MPI_COMM_WORLD, &globalSize);

  printf("\nThis is %s process number: %d / %d\n", PROGRAM_NAME, globalRank, globalSize);   
  MPI_Barrier(MPI_COMM_WORLD);

  ignoreExceptionsDenormFloat(); 

  CommandLine cl(argc, argv); 

  globals.globalSize = globalSize; 
  globals.globalRank = globalRank; 

  initParamStruct *initParams = (initParamStruct*)exa_calloc(1,sizeof(initParamStruct));   
  parseConfigWithNcl(configFileName, &initParams);
  setupGlobals(initParams); 

  if(globalSize < initParams->numRunParallel)
    {
      if(globalRank == 0)
	{
	  cout << "You requested to run "  << initParams->numRunParallel << " in parallel, however there are only " << globalSize << " processes (we need at least 1 process per run, see >numRunParallel<)"  << endl; 
	}
      MPI_Abort(MPI_COMM_WORLD, 1);
    }
  
  // comm is the communicator used by the legacy axml-stuff in order to compute the likelihood.  
  int processesPerBatch = globalSize / initParams->numRunParallel; 
  int myColor = globalRank / processesPerBatch; 
  int newRank = globalRank  % processesPerBatch; 

  globals.myBatch = myColor;  

  MPI_Comm_split(MPI_COMM_WORLD, myColor, newRank, &comm); 


  MPI_Comm_rank(comm, &processID); 
  MPI_Comm_size(comm, &processes); 

  printf("\n\n process %d working on batch %d\n", processID, myColor); 

  if(processID == 0)
    makeFileNames(); 
  exa_main(cl.getAdef(), cl.getSeed(), initParams); 

  MPI_Barrier(MPI_COMM_WORLD);
  MPI_Finalize();
  
  return 0;
}


#endif


























// #define TEST  
/**
   @brief the main ExaBayes function.

  @param tr -- a tree structure that has been initialize in one of the adapter mains. 
   @param adef -- the legacy adef
 */
void exa_main (analdef *adef, int seed, initParamStruct *initParams)
{   
  timeIncrement = gettime();
  globals.adef = adef; 

#ifdef TEST   
  TreeAln traln; 
  traln.initializeFromByteFile(byteFileName);
  traln.enableParsimony(); 

  TreeRandomizer r(123, &traln); 
  r.randomizeTree();
  tree *tr = traln.getTr(); 
  
  for(int i = tr->mxtips+1; i < 2 * tr->mxtips; ++i)
    {
      cout << exa_evaluateParsimony(traln, tr->nodep[i], TRUE ) << endl; 
    }

  exit(0);

#endif

  SampleMaster master(adef,  seed, initParams);
  master.run();
  master.finalizeRuns();
}

