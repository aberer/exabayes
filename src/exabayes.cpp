/** 
    @file exabayes.cpp
    
    @brief This file sets the flavour of exabayes that has been
    compiled (i.e., sequential, pll, examl, ...)
    
*/ 



// TODO re-activate all that initial bla bla when starting up
// exa-bayes (model / program info )


#ifdef HAVE_AVX
#define __AVX
#endif

#include "axml.h" 

#define _INCLUDE_DEFINITIONS
#include "GlobalVariables.hpp"
#undef _INCLUDE_DEFINITIONS

#include "proposals.h"
#include "output.h"
#include "adapters.h"
#include "CommandLine.hpp"
#include "SampleMaster.hpp"
#include "ParallelSetup.hpp"






// #define TEST  
/**
   @brief the main ExaBayes function.

  @param tr -- a tree structure that has been initialize in one of the adapter mains. 
   @param adef -- the legacy adef
 */
void exa_main (const CommandLine &cl, ParallelSetup &pl )
{   
  timeIncrement = gettime();

#ifdef TEST   
  TreeAln traln; 
  traln.initializeFromByteFile(byteFileName);
  traln.enableParsimony(); 

  TreeRandomizer r(123, &traln); 
  r.randomizeTree();
  tree *tr = traln.getTr(); 
  
  for(int i = tr->mxtips+1; i < 2 * tr->mxtips; ++i)
    {
      cout << exa_evaluateParsimony(traln, tr->nodep[i], TRUE ) << endl; 
    }

  exit(0);

#endif

  SampleMaster master( cl, pl);
  master.run();
  master.finalizeRuns();
}











/* 
   tell the CPU to ignore exceptions generated by denormalized floating point values.
   If this is not done, depending on the input data, the likelihood functions can exhibit 
   substantial run-time differences for vectors of equal length.
*/

void ignoreExceptionsDenormFloat()
{
#if ! (defined(__ppc) || defined(__powerpc__) || defined(PPC))
  _mm_setcsr( _mm_getcsr() | _MM_FLUSH_ZERO_ON);
#endif   
}


#if HAVE_PLL != 0
#include "globalVariables.h"
#endif

#if HAVE_PLL == 0 
extern int processID; 
extern int processes;
extern MPI_Comm comm; 
#endif


int main(int argc, char *argv[])
{   
  ParallelSetup pl(argc,argv); 		// MUST be the first thing to do because of mpi_init ! 


#if HAVE_PLL != 0 && ( (defined(_FINE_GRAIN_MPI) || defined(_USE_PTHREADS)))
  assert(0); 
#endif


  ignoreExceptionsDenormFloat(); 
  CommandLine cl(argc, argv); 

#if HAVE_PLL == 0 
  pl.initializeExaml(cl);
#endif

#if HAVE_PLL == 0
  if(processID == 0)
#endif
    makeFileNames();


  exa_main( cl, pl); 

  pl.finalize();  
  return 0;
}
