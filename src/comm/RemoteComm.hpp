#ifndef _REMOTE_COMM_HPP
#define _REMOTE_COMM_HPP

#include <vector>
#include <memory>

#include <iostream>

#include "common.h"

class CommRequest;


///////////////////////////////////////////////////////////////////////////////
//                                REMOTE COMM                                //
///////////////////////////////////////////////////////////////////////////////
class RemoteComm
{
    ///////////////////////////////////////////////////////////////////////////
    //                              PUBLIC TYPES                             //
    ///////////////////////////////////////////////////////////////////////////
public:
    using SELF = RemoteComm;

    ///////////////////////////////////////////////////////////////////////////
    //                            PUBLIC INTERFACE                           //
    ///////////////////////////////////////////////////////////////////////////
public:
    // ________________________________________________________________________
    static uint64_t                        getMaxTag();
    // ________________________________________________________________________
    class Impl;         // CLASS declaration!
    // ________________________________________________________________________
    RemoteComm();
    // ________________________________________________________________________
    RemoteComm(
        const RemoteComm&rhs);
    // ________________________________________________________________________
    RemoteComm(
        RemoteComm&&rhs);
    // ________________________________________________________________________
    ~RemoteComm();
    // ________________________________________________________________________
    RemoteComm&                            operator=(
        RemoteComm rhs);
    // ________________________________________________________________________
    friend void                            swap(
        RemoteComm& lhs,
        RemoteComm& rhs);

  #include "CommCore.hpp"

    // ________________________________________________________________________
    void                                   waitAtBarrier() const;
    // ________________________________________________________________________
    void                                   createSendRequest(
        std::vector<char>array,
        int              dest,
        int              tag,
        CommRequest&     req);
    // ________________________________________________________________________
    void                                   createRecvRequest(
        int          src,
        int          tag,
        nat          length,
        CommRequest& req);
    // ________________________________________________________________________
    friend std::ostream&                   operator<<(
        std::ostream&     out,
        const RemoteComm& rhs)
    {return out << "R-" << rhs.getRank()  << "/" << rhs.size(); }
    // ________________________________________________________________________
    nat                                    getNumberOfPhysicalNodes();
    // ________________________________________________________________________
    int                                    getOffsetForThreadPin();

    ///////////////////////////////////////////////////////////////////////////
    //                              PRIVATE DATA                             //
    ///////////////////////////////////////////////////////////////////////////
private:
    std::unique_ptr<RemoteComm::Impl> _impl;
};


#endif
