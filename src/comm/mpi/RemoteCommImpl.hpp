#ifndef _REMTE_COMM_IMPL_PARA_HPP
#define _REMTE_COMM_IMPL_PARA_HPP

#include "MpiType.hpp"
#include <vector>

#include "common.h"

class CommRequest;

#include "RemoteComm.hpp"

///////////////////////////////////////////////////////////////////////////////
//                              REMOTE COMM IMPL                             //
///////////////////////////////////////////////////////////////////////////////
class RemoteComm::Impl
{
    ///////////////////////////////////////////////////////////////////////////
    //                              PUBLIC TYPES                             //
    ///////////////////////////////////////////////////////////////////////////
public:
    using SELF = Impl;

    ///////////////////////////////////////////////////////////////////////////
    //                              PUBLIC DATA                              //
    ///////////////////////////////////////////////////////////////////////////
    // TODO: omg
public:
    static uint64_t _maxTagValue;

    ///////////////////////////////////////////////////////////////////////////
    //                            PUBLIC INTERFACE                           //
    ///////////////////////////////////////////////////////////////////////////
public:
    // ________________________________________________________________________
    Impl()
        : _comm{MPI_COMM_WORLD}
    {MPI_Comm_dup(MPI_COMM_WORLD, &_comm); }
    // ________________________________________________________________________
    Impl(
        const Impl& rhs);
    // ________________________________________________________________________
    Impl&                          operator=(
        Impl rhs);
    // ________________________________________________________________________
    friend void                    swap(
        Impl& lhs,
        Impl& rhs);
    // ________________________________________________________________________
    ~Impl();
    // ________________________________________________________________________
    void                           waitAtBarrier() const;

#include "CommCore.hpp"

    // ________________________________________________________________________
    void                           createSendRequest(
        std::vector<char>array,
        int              dest,
        int              tag,
        CommRequest&     req);
    // ________________________________________________________________________
    void                           createRecvRequest(
        int          src,
        int          tag,
        nat          length,
        CommRequest& req);
    // ________________________________________________________________________
    nat                            getNumberOfPhysicalNodes();

    ///////////////////////////////////////////////////////////////////////////
    //                              PRIVATE DATA                             //
    ///////////////////////////////////////////////////////////////////////////
private:
    MPI_Comm _comm;
};


#include "comm/mpi/RemoteCommImpl.tpp"


#endif
